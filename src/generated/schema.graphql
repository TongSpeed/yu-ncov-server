### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Area {
  city: City!
  id: String!
  title: String!
}

input AreaFilter {
  every: AreaWhereInput
  none: AreaWhereInput
  some: AreaWhereInput
}

input AreaOrderByInput {
  id: OrderByArg
  title: OrderByArg
}

input AreaWhereInput {
  AND: [AreaWhereInput!]
  city: CityWhereInput
  id: StringFilter
  NOT: [AreaWhereInput!]
  OR: [AreaWhereInput!]
  title: StringFilter
}

type AuthPayload {
  token: String!
  user: User!
}

type City {
  areas(after: String, before: String, first: Int, last: Int, skip: Int): [Area!]!
  id: String!
  province: Province!
  title: String!
}

input CityFilter {
  every: CityWhereInput
  none: CityWhereInput
  some: CityWhereInput
}

input CityOrderByInput {
  id: OrderByArg
  title: OrderByArg
}

type CityRecord {
  city: City!
  confirmedCount: Int!
  country: Country!
  createdAt: DateTime!
  curedCount: Int!
  deadCount: Int!
  id: String!
  province: Province!
  recordAt: DateTime!
  sourceUrl: String!
  suspectedCount: Int!
  updatedAt: DateTime!
  virus: VirusInfo!
}

input CityRecordFilter {
  every: CityRecordWhereInput
  none: CityRecordWhereInput
  some: CityRecordWhereInput
}

input CityRecordOrderByInput {
  confirmedCount: OrderByArg
  createdAt: OrderByArg
  curedCount: OrderByArg
  deadCount: OrderByArg
  id: OrderByArg
  recordAt: OrderByArg
  sourceUrl: OrderByArg
  suspectedCount: OrderByArg
  updatedAt: OrderByArg
}

input CityRecordWhereInput {
  AND: [CityRecordWhereInput!]
  city: CityWhereInput
  confirmedCount: IntFilter
  country: CountryWhereInput
  createdAt: DateTimeFilter
  curedCount: IntFilter
  deadCount: IntFilter
  id: StringFilter
  NOT: [CityRecordWhereInput!]
  OR: [CityRecordWhereInput!]
  province: ProvinceWhereInput
  recordAt: DateTimeFilter
  sourceUrl: StringFilter
  suspectedCount: IntFilter
  updatedAt: DateTimeFilter
  virus: VirusInfoWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  areas: AreaFilter
  cityRecords: CityRecordFilter
  id: StringFilter
  NOT: [CityWhereInput!]
  OR: [CityWhereInput!]
  province: ProvinceWhereInput
  title: StringFilter
}

input CityWhereUniqueInput {
  id: String
}

type Country {
  id: String!
  provinces(after: String, before: String, first: Int, last: Int, skip: Int): [Province!]!
  title: String!
}

type CountryRecord {
  confirmedAddCount: Int
  confirmedCount: Int!
  continents: String
  country: Country!
  createdAt: DateTime!
  curedAddCount: Int
  curedCount: Int!
  deadAddCount: Int
  deadCount: Int!
  id: String!
  recordAt: DateTime!
  seriousAddCount: Int
  seriousCount: Int
  sourceUrl: String!
  suspectedAddCount: Int
  suspectedCount: Int!
  updatedAt: DateTime!
  virus: VirusInfo!
}

input CountryRecordFilter {
  every: CountryRecordWhereInput
  none: CountryRecordWhereInput
  some: CountryRecordWhereInput
}

input CountryRecordOrderByInput {
  confirmedAddCount: OrderByArg
  confirmedCount: OrderByArg
  continents: OrderByArg
  createdAt: OrderByArg
  curedAddCount: OrderByArg
  curedCount: OrderByArg
  deadAddCount: OrderByArg
  deadCount: OrderByArg
  id: OrderByArg
  recordAt: OrderByArg
  seriousAddCount: OrderByArg
  seriousCount: OrderByArg
  sourceUrl: OrderByArg
  suspectedAddCount: OrderByArg
  suspectedCount: OrderByArg
  updatedAt: OrderByArg
}

input CountryRecordWhereInput {
  AND: [CountryRecordWhereInput!]
  confirmedAddCount: NullableIntFilter
  confirmedCount: IntFilter
  continents: NullableStringFilter
  country: CountryWhereInput
  createdAt: DateTimeFilter
  curedAddCount: NullableIntFilter
  curedCount: IntFilter
  deadAddCount: NullableIntFilter
  deadCount: IntFilter
  id: StringFilter
  NOT: [CountryRecordWhereInput!]
  OR: [CountryRecordWhereInput!]
  recordAt: DateTimeFilter
  seriousAddCount: NullableIntFilter
  seriousCount: NullableIntFilter
  sourceUrl: StringFilter
  suspectedAddCount: NullableIntFilter
  suspectedCount: IntFilter
  updatedAt: DateTimeFilter
  virus: VirusInfoWhereInput
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  cityRecords: CityRecordFilter
  continents: NullableStringFilter
  countryRecords: CountryRecordFilter
  id: StringFilter
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  provinceRecords: ProvinceRecordFilter
  provinces: ProvinceFilter
  title: StringFilter
}

input CountryWhereUniqueInput {
  id: String
  title: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, name: String, nickname: String, password: String!): AuthPayload!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Province {
  cities(after: String, before: String, first: Int, last: Int, skip: Int): [City!]!
  country: Country!
  id: String!
  title: String!
}

input ProvinceFilter {
  every: ProvinceWhereInput
  none: ProvinceWhereInput
  some: ProvinceWhereInput
}

input ProvinceOrderByInput {
  id: OrderByArg
  title: OrderByArg
}

type ProvinceRecord {
  confirmedCount: Int!
  country: Country!
  createdAt: DateTime!
  curedCount: Int!
  deadCount: Int!
  id: String!
  province: Province!
  recordAt: DateTime!
  sourceUrl: String!
  suspectedCount: Int!
  updatedAt: DateTime!
  virus: VirusInfo!
}

input ProvinceRecordFilter {
  every: ProvinceRecordWhereInput
  none: ProvinceRecordWhereInput
  some: ProvinceRecordWhereInput
}

input ProvinceRecordOrderByInput {
  confirmedCount: OrderByArg
  createdAt: OrderByArg
  curedCount: OrderByArg
  deadCount: OrderByArg
  id: OrderByArg
  recordAt: OrderByArg
  sourceUrl: OrderByArg
  suspectedCount: OrderByArg
  updatedAt: OrderByArg
}

input ProvinceRecordWhereInput {
  AND: [ProvinceRecordWhereInput!]
  confirmedCount: IntFilter
  country: CountryWhereInput
  createdAt: DateTimeFilter
  curedCount: IntFilter
  deadCount: IntFilter
  id: StringFilter
  NOT: [ProvinceRecordWhereInput!]
  OR: [ProvinceRecordWhereInput!]
  province: ProvinceWhereInput
  recordAt: DateTimeFilter
  sourceUrl: StringFilter
  suspectedCount: IntFilter
  updatedAt: DateTimeFilter
  virus: VirusInfoWhereInput
}

input ProvinceWhereInput {
  AND: [ProvinceWhereInput!]
  cities: CityFilter
  cityRecords: CityRecordFilter
  country: CountryWhereInput
  id: StringFilter
  NOT: [ProvinceWhereInput!]
  OR: [ProvinceWhereInput!]
  provinceRecords: ProvinceRecordFilter
  title: StringFilter
}

type Query {
  areas(after: String, before: String, first: Int, last: Int, orderBy: AreaOrderByInput, skip: Int, where: AreaWhereInput): [Area!]!
  cities(after: String, before: String, first: Int, last: Int, orderBy: CityOrderByInput, skip: Int, where: CityWhereInput): [City!]!
  city(where: CityWhereUniqueInput!): City
  cityRecords(after: String, before: String, first: Int, last: Int, orderBy: CityRecordOrderByInput, skip: Int, where: CityRecordWhereInput): [CityRecord!]!
  countries(after: String, before: String, first: Int, last: Int, skip: Int): [Country!]!
  country(where: CountryWhereUniqueInput!): Country
  countryRecords(after: String, before: String, first: Int, last: Int, orderBy: CountryRecordOrderByInput, skip: Int, where: CountryRecordWhereInput): [CountryRecord!]!
  me: User
  provinceRecords(after: String, before: String, first: Int, last: Int, orderBy: ProvinceRecordOrderByInput, skip: Int, where: ProvinceRecordWhereInput): [ProvinceRecord!]!
  provinces(after: String, before: String, first: Int, last: Int, orderBy: ProvinceOrderByInput, skip: Int, where: ProvinceWhereInput): [Province!]!
  virusInfo(where: VirusInfoWhereUniqueInput!): VirusInfo
}

enum Role {
  ADMIN
  USER
  VERIFIED
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  avatar: Boolean!
  createdAt: DateTime!
  email: String!
  id: String!
  name: String
  nickname: String!
  role: Role!
  updatedAt: DateTime!
}

type VirusInfo {
  description: String!
  id: String!
  title: String!
}

input VirusInfoWhereInput {
  AND: [VirusInfoWhereInput!]
  cityRecords: CityRecordFilter
  countryRecords: CountryRecordFilter
  description: StringFilter
  id: StringFilter
  NOT: [VirusInfoWhereInput!]
  OR: [VirusInfoWhereInput!]
  provinceRecords: ProvinceRecordFilter
  title: StringFilter
}

input VirusInfoWhereUniqueInput {
  id: String
  title: String
}
